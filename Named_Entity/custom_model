from __future__ import unicode_literals, print_function
import plac #
import random
from pathlib import Path
import spacy
from tqdm import tqdm


# training data
TRAIN_DATA = [
    ('put your won data', {
        'entities': [(0, 15, 'PERSON')]
    })
]


def main_fun(model=None, iter=100):

    if model is not None:
        nlp = spacy.load(model)  # load existing spaCy model
        print("Loaded model '%s'" % model)
    else:
        nlp = spacy.blank('en')  # create blank Language class
        print("Created blank 'en' model")

    if 'ner' not in nlp.pipe_names:
        ner = nlp.create_pipe('ner')
        nlp.add_pipe(ner, last=True)
    # otherwise, get it so we can add labels
    else:
        ner = nlp.get_pipe('ner')

    for _, annotation in TRAIN_DATA:
        for ent in annotation.get('entities'):
            ner.add_label(ent[2])

        # get names of other pipes to disable them during training
    other_pipes = [pipe for pipe in nlp.pipe_names if pipe != 'ner']
    with nlp.disable_pipes(*other_pipes):  # only train NER
        optimizer = nlp.begin_training()
        for itn in range(iter):
            random.shuffle(TRAIN_DATA)
            losses = {}
            for text, annotations in tqdm(TRAIN_DATA):
                nlp.update(
                    [text],  # batch of texts
                    [annotations],  # batch of annotations
                    drop=0.5,  # dropout - make it harder to memorise data
                    sgd=optimizer,  # callable to update weights
                    losses=losses)
            print(losses)

    text1 = ['testing data']
    for i in text1:
        test = nlp(i)
        for j in test.ents:
            print(j.text, j.label_)


if __name__ == '__main__':
    main_fun()

else:
    print('null')
